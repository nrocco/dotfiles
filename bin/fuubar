#!/usr/bin/env python3
import argparse
import json
import pprint
import re
import subprocess


def lint_govet(file):
    result = subprocess.run(['go', 'vet', './...'], capture_output=True, text=True)
    for line in result.stderr.splitlines():
        match = re.match(r"^([^:]+):(\d+):\d+: (.*)$", line)
        if match and match.group(1) == file:
            yield {
                'file': match.group(1),
                'line': match.group(2),
                'message': match.group(3),
            }

def lint_golint(file):
    result = subprocess.run(['golint', '-set_exit_status', './...'], capture_output=True, text=True)
    for line in result.stderr.splitlines():
        match = re.match(r"^([^:]+):(\d+):\d+: (.*)$", line)
        if match and match.group(1) == file:
            yield {
                'file': match.group(1),
                'line': match.group(2),
                'message': match.group(3),
            }


def lint_yaml(file):
    result = subprocess.run(['yamllint', '--strict', '--format=parsable', file], capture_output=True, text=True)
    for line in result.stdout.splitlines():
        match = re.match(r"^([^:]+):(\d+):\d+: (.*)$", line)
        if match:
            yield {
                'file': match.group(1),
                'line': match.group(2),
                'message': match.group(3),
            }


def lint_jq(file):
    result = subprocess.run(['jq', '.', file], capture_output=True, text=True)
    for line in result.stderr.splitlines():
        match = re.match(r"^parse error: (.*) at line (\d+), .*$", line)
        if match:
            yield {
                'file': file,
                'line': match.group(2),
                'message': match.group(1),
            }


def lint_php(file):
    result = subprocess.run(['php', '-l', file], capture_output=True, text=True)
    for line in result.stdout.splitlines():
        match = re.match(r"^Parse error: (.*) in (.*) on line (\d+)$", line)
        if match:
            yield {
                'file': match.group(2),
                'line': match.group(3),
                'message': match.group(1),
            }


def lint_php_cs_fixer(file):
    result = subprocess.run(['bin/php-cs-fixer', 'fix', '--no-ansi', '--dry-run', '--format=gitlab', file], capture_output=True, text=True)
    for line in result.stdout.splitlines():
        if line.startswith('[{'):
            data = json.loads(line)
            for error in data:
                yield {
                    'file': error['location']['path'],
                    'line': 1,
                    'message': error['description']
                }
            break


def lint_rubocop(file):
    result = subprocess.run(['chef', 'exec', 'rake', 'style:ruby'], capture_output=True, text=True)
    for line in result.stdout.splitlines():
        match = re.match(r"^([^:]*):(\d+):\d+: (.*)$", line)
        if match and match.group(1) == file:
            yield {
                'file': match.group(1),
                'line': match.group(2),
                'message': match.group(3),
            }


def lint_foodcritic(file):
    result = subprocess.run(['foodcritic', '--no-progress', file], capture_output=True, text=True)
    for line in result.stdout.splitlines():
        match = re.match(r"^(.*): ([^:]+):(\d+)$", line)
        if match:
            yield {
                'file': match.group(2),
                'line': match.group(3),
                'message': match.group(1),
            }


def lint_linter(file):
    result = subprocess.run(['linter', file], capture_output=True, text=True)
    for line in result.stdout.splitlines():
        match = re.match(r"^(.*) on line (\d+) (has .*)$", line)
        if match:
            yield {
                'file': match.group(1),
                'line': match.group(2),
                'message': match.group(3),
            }


MAPPING = {
    '.yaml': [lint_linter, lint_yaml],
    '.yml': [lint_linter, lint_yaml],
    '.json': [lint_linter, lint_jq],
    '.php': [lint_linter, lint_php, lint_php_cs_fixer],
    '.rb': [lint_linter, lint_rubocop, lint_foodcritic],
    '.go':  [lint_linter, lint_govet, lint_golint],
}


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("files", nargs='*', help="files to lint")
    args = parser.parse_args()
    for file in args.files:
        for ext, linters in MAPPING.items():
            if file.endswith(ext):
                for linter in linters:
                    for error in linter(file):
                        print("{file}||{line}||{message}".format(**error))


if __name__ == '__main__':
    main()
