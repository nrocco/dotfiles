#!/usr/bin/env python3
import argparse
import subprocess


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--wireshark", default='/Applications/Wireshark.app/Contents/MacOS/Wireshark', help="location to the wireshark binary")
    parser.add_argument("--verbose", default=False, action="store_true", help="be verbose")
    parser.add_argument("--sudo", default=False, action="store_true", help="use sudo on the remote")
    parser.add_argument("--docker", default=False, action="store_true", help="run tcpdump in a docker container")
    parser.add_argument("--container", help="run tcpdump in this container")
    parser.add_argument("--interface", help="run tcpdump on this interface")
    parser.add_argument("--list", default=False, action="store_true", help="list all remote interfaces or containers")
    parser.add_argument("host", help="the remote host to connect to")
    parser.add_argument("filter", nargs='*', default=['not', 'port', '22'], help="the filter to pass to tcpdump")
    args = parser.parse_args()

    ssh_args = ["ssh", "-T", "-q", args.host]
    if args.sudo:
        ssh_args.append("sudo")

    if args.list:
        if args.docker:
            ssh_args += ['docker', 'container', 'list', '--no-trunc', '--format', '"table {{.Names}}\t{{.Image}}\t{{.Ports}}\t{{.Status}}"']
        else:
            ssh_args += ['ip', '-o', '-4', '-br', 'addr', 'show']
        if args.verbose:
            print(f"{ssh_args=}")
        subprocess.run(ssh_args)
        return

    if args.docker:
        if not args.container:
            print("error: you must specify --container option")
            return
        ssh_args += ['docker', 'container', 'run', '--rm', '--net', f'container:{args.container}', 'nrocco/tcpdump']
    ssh_args += ["tcpdump", "-s", "0", "-U", "-n", "-w", "-"]
    if args.interface:
        ssh_args += ['--interface', args.interface]
    ssh_args += args.filter

    if args.verbose:
        print(f"{ssh_args=}")

    print(f"filter: {' '.join(args.filter)}")
    with subprocess.Popen(ssh_args, stdout=subprocess.PIPE) as ssh:
        subprocess.run([args.wireshark, '--no-promiscuous-mode', '-k', '--interface', '-'], stdin=ssh.stdout)


if __name__ == '__main__':
    main()
