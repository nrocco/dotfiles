#!/usr/bin/env bash

VERBOSE=0
EXIT_STATUS=0
FILES=()
CHECK_CLASSNAME='yes'
CHECK_NAMESPACE='yes'
CHECK_IMPORTS='yes'
CHECK_TABS='yes'
CHECK_SPACES='yes'
CHECK_EOL='yes'

while test $# -gt 0
do
    case "$1" in
        --help)
            echo "Usage: $(basename $0) [--skip-classname] [--skip-namespace] [--skip-imports] [--skip-tabs] [--skip-spaces] [--skip-eol] [--verbose] file <...file>"
            exit 3
            ;;
        --skip-classname)
            CHECK_CLASSNAME='no'
            ;;
        --skip-namespace)
            CHECK_NAMESPACE='no'
            ;;
        --skip-imports)
            CHECK_IMPORTS='no'
            ;;
        --skip-tabs)
            CHECK_TABS='no'
            ;;
        --skip-spaces)
            CHECK_SPACES='no'
            ;;
        --skip-eol)
            CHECK_EOL='no'
            ;;
        --verbose)
            VERBOSE=1
            ;;
        *)
            FILES+=("$1")
            ;;
    esac

    shift
done


function log() {
    if [[ ! "$VERBOSE" == "" && ! "$VERBOSE" == "0" ]]; then
        printf "\033[1;32m"
        echo -n $1
        printf "\033[0m"
        echo ": $2"
    fi
}

function error() {
    EXIT_STATUS=1

    printf "\033[1;31m"
    echo -n $1
    printf "\033[0m"
    echo ": $2"
}

function __check_classname() {
    local classname=$(sed -n 's/^.*class \([^ ]\+\).*$/\1/p' "$1")

    if grep -Eq "$classname.php$" <<<$1
    then
        log "$1" "Filename matches the class name $classname"
    else
        error "$1" "File contains the wrong class $classname"
    fi
}

function __check_namespace() {
    if ! grep -Eq '^namespace [^;]+;.*$' "$1"
    then
        error "$1" "This class is missing the namespace definition."
        return
    fi

    local namespace=$(sed -n 's/^namespace \([^;]*\);\s*$/\1/p' "$1")
    local filename=$(echo $namespace | sed 's#\\#/#g')

    if grep -qE $filename <<<"$1"
    then
        log "$1" "The namespace of the file matches the directory it is in."
    else
        error "$1" "Class is in the wrong namespace $namespace"
    fi
}

function __check_imports() {
    while read -r use; do
        local class=$(echo $use | sed -n 's/.*[ \\]\([^\\ ]*$\)/\1/p')

        if [ 1 -eq $(grep -Ec "\<${class}\>" $1) ]; then
            error "$1" "$class is not used in file. Consider removing 'use $use'"
        else
            log "$1" "Use statement for $use is ok!"
        fi
    done <<< "$(sed -n 's#^use \(.*\);.*#\1#p' $1)"
}

function __check_tabs() {
    if grep -qE "$(echo -ne \\t)" $1; then
        error "$1" "Found literal tab characters"
    else
        log "$1" "No literal tab characters found!"
    fi
}


function __check_spaces() {
    if grep -qE ' +$' $1; then
        error "$1" "Found trailing whitespaces"
    else
        log "$1" "No trailing whitespace found!"
    fi
}


function __check_eol() {
    if grep -q --color=never -R $'\r' "$1"
    then
        error "$1" "Found windows style line endings"
    else
        log "$1" "No windows style line endings found!"
    fi
}


function __run_checks_on_file() {
    if [ ! -f "$file" ]
    then
        log "$file" "File does not exist. Ignoring." && continue
    fi

    [[ 'yes' == "$CHECK_CLASSNAME" ]] && __check_classname "$file"
    [[ 'yes' == "$CHECK_NAMESPACE" ]] && __check_namespace "$file"
    [[ 'yes' == "$CHECK_IMPORTS" ]] && __check_imports "$file"
    [[ 'yes' == "$CHECK_TABS" ]] && __check_tabs "$file"
    [[ 'yes' == "$CHECK_SPACES" ]] && __check_spaces "$file"
    [[ 'yes' == "$CHECK_EOL" ]] && __check_eol "$file"
}


if [ -t 0 ]; then

    for file in "${FILES[@]}"
    do
        __run_checks_on_file "$file"
    done

else

    # Files are coming from a pipe (/dev/stdin)
    while read -r file ; do
        __run_checks_on_file "$file"
    done

fi

exit $EXIT_STATUS
