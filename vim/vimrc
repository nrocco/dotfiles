" ------------------------------------------------------------------------------------------------------------------------------
  set nocompatible                                " Set vim to not be backwards compatible for cooler features
  filetype off

  if filereadable($HOME . '/.vim/bundle/vundle/autoload/vundle.vim')
    set rtp+=~/.vim/bundle/vundle/
    call vundle#rc()

    Plugin 'gmarik/vundle'
    Plugin 'joshdick/onedark.vim'
    Plugin 'vim-airline/vim-airline'
    Plugin 'vim-airline/vim-airline-themes'
    Plugin 'kien/ctrlp.vim'
    Plugin 'jamessan/vim-gnupg'

    Plugin 'SirVer/ultisnips'

    Plugin 'tpope/vim-commentary'
    Plugin 'tpope/vim-fugitive'
    Plugin 'tpope/vim-ragtag'
    Plugin 'tpope/vim-surround'
    Plugin 'tpope/vim-unimpaired'

    " Syntax bundles
    Plugin 'IN3D/vim-raml'
    Plugin 'JulesWang/css.vim'
    Plugin 'StanAngeloff/php.vim'
    Plugin 'elzr/vim-json'
    Plugin 'honza/dockerfile.vim'
    Plugin 'jelera/vim-javascript-syntax'
    Plugin 'leafgarland/typescript-vim'
    Plugin 'lumiliet/vim-twig'
    Plugin 'othree/html5.vim'
    Plugin 'pangloss/vim-javascript'
    Plugin 'pearofducks/ansible-vim'
    Plugin 'plasticboy/vim-markdown'
    Plugin 'posva/vim-vue'
    Plugin 'sheerun/vim-polyglot'
    Plugin 'stephpy/vim-yaml'
    Plugin 'tpope/vim-git'
    Plugin 'vim-scripts/groovy.vim'

    " php stuff
    Plugin 'nrocco/vim-phpunit'
    Plugin 'nrocco/vim-phplint'
    Plugin 'arnaud-lb/vim-php-namespace'
    Plugin 'sumpygump/php-documentor-vim'

    " chef stuff
    Plugin 'gregf/ultisnips-chef'
    Plugin 'ngmy/vim-rubocop'
    Plugin 'dougireton/vim-chef'

    " python stuff
    Plugin 'indentpython.vim'
  endif
" ------------------------------------------------------------------------------------------------------------------------------


" ------------------------------------------------------------------------------------------------------------------------------
  set nomodeline                                  " Disable modeline for security reasons (FreeBSD tip)
" ------------------------------------------------------------------------------------------------------------------------------
  syntax enable                                   " Enable syntaxt highlighting/coloring
  set termguicolors
  colorscheme onedark
  set number                                      " Show line numbers
  set showmode                                    " Show in what mode we are in (paste/nopaste)
  set nopaste
  set numberwidth=6                               " Make space to show line numbers up to 99999
" ------------------------------------------------------------------------------------------------------------------------------
  set nowrap                                      " Disable wrapping of lines
  set linebreak                                   " If we enable wrapping. Make it at least sensible
  set nolist                                      " List disables linebreak
  set textwidth=0                                 " Prevent Vim from automatically inserting line breaks
  set wrapmargin=0                                " Prevent Vim from automatically inserting line breaks
" ------------------------------------------------------------------------------------------------------------------------------
  set scrolloff=4                                 " Always have at least 3 lines before the window's bottom
  set lazyredraw                                  " Don't update while in macro
  set ttyfast                                     " Improves redrawing
  set ttyscroll=3
  set nofoldenable                                " Disable Folding
" ------------------------------------------------------------------------------------------------------------------------------
  set incsearch                                   " Searching starts after you enter the string
  set ignorecase                                  " Searching is not case sensitive
  set smartcase                                   " If a pattern contains an uppercase letter, it is case sensitive, otherwise not
  set hlsearch                                    " Highlight searches
  set gdefault                                    " Assume the /g flag on :s substitutions to replace all matches in a line:
  set wrapscan                                    " Set the search scan to wrap around the file
  set enc=utf-8                                   " UTF-8 Default encoding
" ------------------------------------------------------------------------------------------------------------------------------
  filetype plugin indent on                       " Enable plugins on a file type basis
" ------------------------------------------------------------------------------------------------------------------------------
  set noerrorbells                                " No audio bell
  set novisualbell                                " No visual bell
" ------------------------------------------------------------------------------------------------------------------------------
  set autoread                                    " Set to auto read when a file is changed from the outside
  set wildmenu                                    " Enables a menu at the bottom of the vim/gvim window.
  set wildmode=list:longest,full                  " Completion on the command line
  set completeopt=longest,menuone                 " Completion popup doesnâ€™t select first item and typing new letters updates the completion list
  set showmatch                                   " Show/highlight matching braches
  set nosmartindent                               " Automatically indent braces (overrides autoindent)
  set report=0                                    " Tell us when anything is changed via :...
" ------------------------------------------------------------------------------------------------------------------------------
  set directory=/var/tmp                          " directory to place swap files in
" ------------------------------------------------------------------------------------------------------------------------------
  set expandtab                                   " Tab will be translated to spaces
  set softtabstop=4                               " Use these amount of spaces when inserting a tab
  set tabstop=4                                   " Use these amount of spaces when inserting a tab
  set shiftwidth=4                                " Control how many columns text is indented with the reindent operations
" ------------------------------------------------------------------------------------------------------------------------------
  set ruler                                       " Show line number and cursor position
  if has('statusline')
    set laststatus=2                              " Always show the status line
  endif
" ------------------------------------------------------------------------------------------------------------------------------
  set clipboard-=autoselect                       " Disable the automatic selection and copying of text in terminal Vim
" ------------------------------------------------------------------------------------------------------------------------------

  let mapleader = ","                             " Set mapleader key to ,

  set wildignore+=*.pyc,*/cache/*,*/log/*,*/logs/*,*.so,*.swp
  set wildignorecase
  let g:netrw_list_hide = '.*\.pyc'


" ---------------------------------------------------------------
" PLUGIN: Clean Trailing Whitespaces from file
" ---------------------------------------------------------------
nnoremap        <leader>c              :call <SID>CleanTrailingWhiteSpaces()<CR>
function! <SID>CleanTrailingWhiteSpaces()
    let _s=@/
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    let @/=_s
    call cursor(l, c)
endfunction
" ---------------------------------------------------------------


" ---------------------------------------------------------------
" PLUGIN: ctrlp.vim
" ---------------------------------------------------------------
  let g:ctrlp_map = '<leader>a'
  let g:ctrlp_lazy_update = 50
  let g:ctrlp_clear_cache_on_exit = 0
  let g:ctrlp_show_hidden = 0
  " let g:ctrlp_follow_symlinks = 1
  " let g:ctrlp_open_new_file = 't'
  let g:ctrlp_working_path_mode = 'r'
  let g:ctrlp_extensions = ['tag']
  " let g:ctrlp_prompt_mappings = {
  "     \ 'AcceptSelection("e")': ['<c-t>'],
  "     \ 'AcceptSelection("t")': ['<cr>', '<2-LeftMouse>'],
  "     \ }
  " let g:ctrlp_buftag_types = {
  "     \ 'yaml': '--languages=ansible --ansible-types=k',
  "     \ }
  let g:ctrlp_custom_ignore = {
      \ 'dir':  '\v[\/](\.(git|hg|svn)|\_site)$',
      \ 'file': '\v\.(exe|so|dll|class|png|jpg|jpeg)$',
      \}
" ---------------------------------------------------------------


" ---------------------------------------------------------------
" PLUGIN: vim-airline
" ---------------------------------------------------------------
  let g:airline_theme = 'bubblegum'
  let g:airline_left_sep = ''
  let g:airline_right_sep = ''
  " Enable the list of buffers
  let g:airline#extensions#tabline#enabled = 1
  " Show just the filename
  let g:airline#extensions#tabline#fnamemod = ':t'
" ---------------------------------------------------------------


" ---------------------------------------------------------------
" PLUGIN: commentary.vim
" Set default comment prefixes for different file types.
" ---------------------------------------------------------------
  autocmd FileType apache   set commentstring=#\ %s
  autocmd FileType nginx    set commentstring=#\ %s
  autocmd FileType php      set commentstring=//\ %s
  autocmd FileType markdown set commentstring=>\ %s
  autocmd FileType yaml     set commentstring=#\ %s

  nmap          \\\         gcc
  vmap          \\          gc
" ---------------------------------------------------------------


" ---------------------------------------------------------------
" PLUGIN: UltiSnips
" ---------------------------------------------------------------
  let g:UltiSnipsExpandTrigger="<tab>"
  let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
  let g:UltiSnipsJumpForwardTrigger="<tab>"
  let g:UltiSnipsListSnippets="<F5>"
" ---------------------------------------------------------------



" ---------------------------------------------------------------
" Keyboard shortcuts
" vim: set foldmarker={,} foldlevel=0 foldmethod=marker spell:
" ---------------------------------------------------------------

" Shortcut to start command mode with the spacebar
  nmap <space> :

" Keep selection in visual mode after indenting lines
  vnoremap < <gv
  vnoremap > >gv

" Wrapped lines goes down/up to next row, rather than next line in file.
  nnoremap j gj
  nnoremap k gk

" Fix indentiation in whole file
  nnoremap <leader>i mzgg=G`z<CR>

" Keyboard shortcut for find-and-replace
  nnoremap <leader>s :%s/
  vmap <leader>s :s/

" ---------------------------------------------------------------
" Buffer navigation
  set hidden

  map  <C-h>  <ESC>:bprevious<CR>
  nmap <C-h>  <ESC>:bprevious<CR>
  map  <C-l>  <ESC>:bnext<CR>
  nmap <C-l>  <ESC>:bnext<CR>

  nmap <leader>q :bprevious <BAR> bdelete #<CR>
  nmap <leader>n :enew<CR>
  nmap <leader>f :edit 
  nmap <leader>b :CtrlPBuffer<CR>
" ---------------------------------------------------------------


" ---------------------------------------------------------------
" Fix Home/End keys in vim
  :map  <ESC>[H <Home>
  :map  <ESC>[F <End>
  :imap <ESC>[H <C-O><Home>
  :imap <ESC>[F <C-O><End>
  :cmap <ESC>[H <Home>
  :cmap <ESC>[F <End>
" ---------------------------------------------------------------

" Automatically save non-existent directories on save
autocmd BufWritePre * :silent !mkdir -p %:p:h

" vim-json: disable concealing of double quotes
let g:vim_json_syntax_conceal = 0

" Remove the current buffer file from disk
command Rm call delete(expand('%')) | bdelete!

" ---------------------------------------------------------------
" Map :q to close the buffer, and if it is the last buffer, close vim
fun! s:quitiflast()
    let bufcnt = len(filter(range(1, bufnr('$')), 'buflisted(v:val)'))
    bdelete
    if bufcnt < 2
        quit
    endif
endfun

command! Bd :call s:quitiflast()

cnoreabbrev <expr> q getcmdtype() == ":" && getcmdline() == 'q' ? 'Bd' : 'q'
" ---------------------------------------------------------------

" Read settings from a system local vimrc
if filereadable($HOME . '/.vimrclocal')
  source $HOME/.vimrclocal
endif
