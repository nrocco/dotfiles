call plug#begin()
  " layout
  Plug 'ap/vim-buftabline'
  Plug 'itchyny/lightline.vim'
  Plug 'morhetz/gruvbox'

  " Powerusage
  Plug 'christoomey/vim-tmux-navigator'
  Plug 'junegunn/fzf'
  Plug 'junegunn/fzf.vim'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-ragtag'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-sensible'
  Plug 'tpope/vim-eunuch'
  Plug 'tpope/vim-unimpaired'

  " Testing, linting and fixing
  Plug 'janko-m/vim-test'
  Plug 'dense-analysis/ale'
  Plug 'maximbaz/lightline-ale'

  " Snippets
  Plug 'sirver/ultisnips'
  Plug 'honza/vim-snippets'

  " Language tools
  Plug 'arnaud-lb/vim-php-namespace'
  Plug 'dantleech/vim-phpnamespace'
  Plug 'dougireton/vim-chef'
  Plug 'ekalinin/dockerfile.vim'
  Plug 'elzr/vim-json'
  Plug 'jamessan/vim-gnupg'
  Plug 'jwalton512/vim-blade'
  Plug 'leafgarland/typescript-vim'
  Plug 'lumiliet/vim-twig'
  Plug 'othree/html5.vim'
  Plug 'pangloss/vim-javascript'
  Plug 'plasticboy/vim-markdown'
  Plug 'pprovost/vim-ps1'
  Plug 'stephpy/vim-yaml'
  Plug 'storyn26383/vim-vue'
  Plug 'tbastos/vim-lua'
  Plug 'vim-python/python-syntax'
  Plug 'vimjas/vim-python-pep8-indent'
call plug#end()

set nocompatible                                " Make Vim behave in a more useful way.
set hidden                                      " A buffer becomes hidden when it is abandoned. So we can move away from unwritten buffers
set nomodeline                                  " Disable modelines to avoid arbitrary code execution
set noshowmode                                  " Vim Airline takes care of showing the mode
" ------------------------------------------------------------------------------------------------------------------------------
syntax on                                       " Enable Syntax highlighting
set termguicolors                               " Use highlight-guifg and highlight-guibg attributes (thus using 24-bit color).
set number                                      " Enable line numbers
set nopaste                                     " When pasting text, paste as-is
set background=dark                             " Tell vim to improve it's ui far dark colors
set numberwidth=5                               " Enough room for files with 9999 lines :)
colorscheme gruvbox                             " Enable a specific color scheme
" ------------------------------------------------------------------------------------------------------------------------------
set showtabline=2
set nowrap                                      " Disable line wrapping
set nolinebreak                                 " Disable line breaks
set list                                        " Do not visually show tabs, eol and trailing blanks
set listchars=tab:»·,trail:·                    " Show spacing characters
set textwidth=0                                 " Disable line breaking
set wrapmargin=0                                " Disable any margins as wrapping is disabled
" ------------------------------------------------------------------------------------------------------------------------------
set scrolloff=3                                 " Minimal number of screen lines to keep above and below the cursor.
set lazyredraw                                  " The screen will not be redrawn while executing macros, registers, etc.
set ttyfast                                     " Indicates a fast terminal connection.
set ttyscroll=3                                 " Maximum number of lines to scroll the screen.
set nofoldenable                                " When off, all folds are open.
set foldcolumn=0                                " The amount of space to show fold markers
set foldmethod=manual                           " Effectively disable folding
set regexpengine=1                              " Use the older (but faster) regex engine
set redrawtime=5000                             " The time in milliseconds for redrawing the display
set nocursorline                                " Do not highlight the text line of the cursor
set synmaxcol=300                               " Maximum column in which to search for syntax items.
set norelativenumber                            " Do not show the line number relative to the line with the cursor
set noshowmatch                                 " When a bracket is inserted, do not jump to the matching one.
" ------------------------------------------------------------------------------------------------------------------------------
set backspace=start,indent                      " Do not allow backspace to remove a line
set whichwrap=b,s                               " You cannot use arrow keys to go prev or next lines
" ------------------------------------------------------------------------------------------------------------------------------
set incsearch                                   " Searching starts after you enter the string
set ignorecase                                  " Searching is not case sensitive
set smartcase                                   " If a pattern contains an uppercase letter, it is case sensitive, otherwise not
set hlsearch                                    " Highlight searches
set gdefault                                    " Assume the /g flag on :s substitutions to replace all matches in a line:
set wrapscan                                    " Set the search scan to wrap around the file
set encoding=utf8                               " UTF-8 Default encoding
" ------------------------------------------------------------------------------------------------------------------------------
filetype plugin indent on                       " Enable plugins on a file type basis
" ------------------------------------------------------------------------------------------------------------------------------
set noerrorbells                                " No audio bell
set novisualbell                                " No visual bell
set t_vb=                                       " No visual bell
set tm=500
" ------------------------------------------------------------------------------------------------------------------------------
set autoread                                    " Set to auto read when a file is changed from the outside
set wildmenu                                    " Enables a menu at the bottom of the vim/gvim window.
set wildmode=list:longest,full                  " Completion on the command line
set completeopt=menu,menuone,noselect,noinsert  " Completion popup does not select first item and typing new letters updates the completion list
set showmatch                                   " Show/highlight matching braces
set mat=2                                       " How many tenths of a second to blink when matching brackets
set nosmartindent                               " Automatically indent braces (overrides autoindent)
set report=0                                    " Tell us when anything is changed via :...
" ------------------------------------------------------------------------------------------------------------------------------
set directory=~/.cache/vim                      " Directory to place swap files in
set nobackup                                    " Turn backup off since most stuff is in git anyway
set nowb                                        " Turn backup off since most stuff is in git anyway
set noswapfile                                  " Turn backup off since most stuff is in git anyway
" ------------------------------------------------------------------------------------------------------------------------------
set expandtab                                   " Tab will be translated to spaces
set softtabstop=4                               " Use these amount of spaces when inserting a tab
set tabstop=4                                   " Use these amount of spaces when inserting a tab
set shiftwidth=4                                " Control how many columns text is indented with the reindent operations
" ------------------------------------------------------------------------------------------------------------------------------
set ruler                                       " Show line number and cursor position
set updatetime=100
set laststatus=2                                " Always show the status line
set cmdheight=1                                 " Height of the command bar
set diffopt+=hiddenoff
" ------------------------------------------------------------------------------------------------------------------------------
set splitbelow                                  " Open new split panes to right and bottom, which feels more natural
set splitright                                  " Open new split panes to right and bottom, which feels more natural
" ------------------------------------------------------------------------------------------------------------------------------
set clipboard-=autoselect                       " Disable the automatic selection and copying of text in terminal Vim
set path=.,**
set tags^=./.git/tags;
" ------------------------------------------------------------------------------------------------------------------------------
let mapleader = ","                             " Set mapleader key to ,
let g:mapleader = ","                           " Set mapleader key to ,

set wildignore+=*.pyc,*/cache/*,*/log/*,*/logs/*,*.so,*.swp
set wildignorecase                              " Case is ignored when completing file names and directories.
" ------------------------------------------------------------------------------------------------------------------------------

" This will map <c-]> to g<c-]> for both normal and visual modes
nnoremap g] g<c-]>
vnoremap g] g<c-]>

" This will map g<c-]> to <c-]>. In other words just swap the commands
nnoremap gt <c-t>
vnoremap gt <c-t>

" Toggle between paste and nopaste modes
nnoremap <leader>p :set invpaste<CR>

" Clear highlight on pressing ESC
nnoremap <esc> :noh<return><esc>

" ------------------------------------------------------------------------------------------------------------------------------
" PLUGIN: vim netrw
" ------------------------------------------------------------------------------------------------------------------------------
let loaded_netrwPlugin = 1                      " disable netrw plugin completely
let g:netrw_banner = 0                          " suppress the banner
let g:netrw_fastbrowse = 0
let g:netrw_list_hide = '\(^\|\s\s\)\zs\.\S\+'
" ------------------------------------------------------------------------------------------------------------------------------


" ------------------------------------------------------------------------------------------------------------------------------
" PLUGIN: vim-buftabline
" ------------------------------------------------------------------------------------------------------------------------------
let g:buftabline_plug_max = 0
let g:buftabline_indicators = 1
" ------------------------------------------------------------------------------------------------------------------------------


" ------------------------------------------------------------------------------------------------------------------------------
" PLUGIN: lightline
" ------------------------------------------------------------------------------------------------------------------------------
let g:lightline = {
  \ 'enable': {
  \   'statusline': 1,
  \   'tabline': 0,
  \ },
  \ 'colorscheme': 'gruvbox',
  \ 'active': {
  \   'left': [
  \     [ 'mode', 'paste' ],
  \     [ 'gitbranch', 'readonly', 'relativepath' ]
  \   ],
  \   'right': [
  \     [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ],
  \     [ 'lineinfo', 'percent' ],
  \     [ 'fileformat', 'fileencoding', 'filetype' ],
  \   ]
  \ },
  \ 'component_function': {
  \   'gitbranch': 'fugitive#head'
  \ },
  \ 'component_expand': {
  \   'linter_checking': 'lightline#ale#checking',
  \   'linter_warnings': 'lightline#ale#warnings',
  \   'linter_errors': 'lightline#ale#errors',
  \   'linter_ok': 'lightline#ale#ok',
  \ },
  \ 'component_type': {
  \   'linter_checking': 'left',
  \   'linter_warnings': 'warning',
  \   'linter_errors': 'error',
  \   'linter_ok': 'left',
  \ }
  \ }
" ------------------------------------------------------------------------------------------------------------------------------


" ------------------------------------------------------------------------------------------------------------------------------
" PLUGIN: junegunn/fzf.vim - A command-line fuzzy finder written in Go
" ------------------------------------------------------------------------------------------------------------------------------
let g:fzf_buffers_jump = 1
let g:fzf_preview_window = ''
let g:fzf_layout = { 'down': '~30%' }
let g:fzf_history_dir = '~/.cache/fzf-history'

nnoremap <leader>b :Buffers<CR>
nnoremap <leader>f :Files<CR>
nnoremap <leader>h :Helptags<CR>
nnoremap <leader>g :Rg<CR>

autocmd! FileType fzf
autocmd  FileType fzf set laststatus=0 noshowmode noruler | autocmd BufLeave <buffer> set laststatus=2 showmode ruler
" ------------------------------------------------------------------------------------------------------------------------------


" ------------------------------------------------------------------------------------------------------------------------------
" PLUGIN: tpope/vim-commentary - Set default comment prefixes for different file types.
" ------------------------------------------------------------------------------------------------------------------------------
autocmd FileType apache   set commentstring=#\ %s
autocmd FileType nginx    set commentstring=#\ %s
autocmd FileType php      set commentstring=//\ %s
autocmd FileType markdown set commentstring=>\ %s
autocmd FileType yaml     set commentstring=#\ %s

nmap \\\ gcc
vmap \\ gc
" ------------------------------------------------------------------------------------------------------------------------------


" ------------------------------------------------------------------------------------------------------------------------------
" PLUGIN: UltiSnips
" ------------------------------------------------------------------------------------------------------------------------------
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsListSnippets="<F5>"
" ------------------------------------------------------------------------------------------------------------------------------


" ------------------------------------------------------------------------------------------------------------------------------
" PLUGIN: vim-ale
" ------------------------------------------------------------------------------------------------------------------------------
set omnifunc=ale#completion#OmniFunc
let g:ale_cache_executable_check_failures = 1
let g:ale_completion_enabled = 1
let g:ale_lint_on_enter = 0
let g:ale_lint_on_filetype_changed = 0
let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_save = 0
let g:ale_lint_on_text_changed = 0
let g:ale_linters_explicit = 1
let g:ale_open_list = 1
let g:ale_set_balloons = 0
let g:ale_set_signs = 0
let g:ale_linters = {
\   '*':      ['linter'],
\   'go':     ['gobuild', 'gofmt', 'golint', 'govet', 'gopls'],
\   'json':   ['linter', 'jsonlint'],
\   'php':    ['linter', 'php', 'phpstan', 'psalm'],
\   'python': ['linter', 'flake8'],
\   'yaml':   ['linter', 'yamllint'],
\}
let g:ale_fixers = {
\   '*':      ['remove_trailing_lines', 'trim_whitespace'],
\   'go':     ['remove_trailing_lines', 'trim_whitespace', 'gofmt', 'goimports'],
\   'json':   ['remove_trailing_lines', 'trim_whitespace', 'jq'],
\   'php':    ['remove_trailing_lines', 'trim_whitespace', 'php_cs_fixer'],
\   'python': ['remove_trailing_lines', 'trim_whitespace'],
\}
nnoremap <leader>c :ALEReset<CR>
nnoremap <leader>l :ALELint<CR>
nnoremap <leader>L :ALEFix<CR>
augroup CloseLoclistWindowGroup
  autocmd!
  autocmd QuitPre * if empty(&buftype) | lclose | endif
augroup END
" ------------------------------------------------------------------------------------------------------------------------------


" ------------------------------------------------------------------------------------------------------------------------------
" PLUGIN: vim-json
" ------------------------------------------------------------------------------------------------------------------------------
let g:vim_json_syntax_conceal = 0
" ------------------------------------------------------------------------------------------------------------------------------


" ------------------------------------------------------------------------------------------------------------------------------
" PLUGIN: vim-test
" ------------------------------------------------------------------------------------------------------------------------------
let test#strategy = "vimterminal"
nnoremap <leader>t :TestNearest<CR>
nnoremap <leader>T :TestFile<CR>
" ------------------------------------------------------------------------------------------------------------------------------


" ------------------------------------------------------------------------------------------------------------------------------
" Keyboard shortcuts
" ------------------------------------------------------------------------------------------------------------------------------
" Shortcut to start command mode with the spacebar
nnoremap <space> :

" Keep selection in visual mode after indenting lines
vnoremap < <gv
vnoremap > >gv

" Wrapped lines goes down/up to next row, rather than next line in file.
nnoremap j gj
nnoremap k gk

" Fix indentation in whole file
nnoremap <leader>i mzgg=G`z<CR>

" Keyboard shortcut for find-and-replace
nnoremap <leader>s :%s/
vnoremap <leader>s :s/
" ------------------------------------------------------------------------------------------------------------------------------


" ------------------------------------------------------------------------------------------------------------------------------
" Buffer navigation
" ------------------------------------------------------------------------------------------------------------------------------
nnoremap <leader>n :enew<CR>
nnoremap <leader>e :edit<SPACE>
nnoremap <leader>w :write<CR>
nnoremap <leader>wq :call BufferByeAndWrite()<CR>
nnoremap <leader>q :call BufferBye()<CR>
nnoremap <leader>Q :call BufferByeForce()!<CR>
function! BufferByeAndWrite()
    if len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1
        :wq
    else
        :write
        :bwipeout
    endif
endfunction
function! BufferBye()
    if len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1
        :quit
    else
        :bwipeout
    endif
endfunction
function! BufferByeForce()
    if len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1
        :quit!
    else
        :bwipeout!
    endif
endfunction
" ------------------------------------------------------------------------------------------------------------------------------


" ------------------------------------------------------------------------------------------------------------------------------
" Split navigation
" ------------------------------------------------------------------------------------------------------------------------------
nnoremap <C-Down> <C-w><C-j>
nnoremap <C-Up> <C-w><C-k>
nnoremap <C-Right> <C-w><C-l>
nnoremap <C-Left> <C-w><C-h>
" ------------------------------------------------------------------------------------------------------------------------------


" ------------------------------------------------------------------------------------------------------------------------------
" Fix Home/End keys in vim
" ------------------------------------------------------------------------------------------------------------------------------
:map  <ESC>[H <Home>
:map  <ESC>[F <End>
:imap <ESC>[H <C-O><Home>
:imap <ESC>[F <C-O><End>
:cmap <ESC>[H <Home>
:cmap <ESC>[F <End>
" ------------------------------------------------------------------------------------------------------------------------------


" ------------------------------------------------------------------------------------------------------------------------------
" Automatically save non-existent directories on save
" ------------------------------------------------------------------------------------------------------------------------------
autocmd BufWritePre * :silent Mkdir!
" ------------------------------------------------------------------------------------------------------------------------------


autocmd BufNewFile,BufRead *.sh.twig set ft=sh.twig
