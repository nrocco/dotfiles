global !p

def underscore_to_capitalized(word):
	return ''.join(x.capitalize() or '' for x in word.split('_'))

def filepath_to_namespace(path):
	abspath = os.path.abspath(path)
	dirname = os.path.dirname(abspath)
	namespace = []
	elems = dirname.split('/') or []
	elems.reverse()
	for elem in elems:
		if elem[0].isupper():
			namespace.append(elem)
		else:
			break
	namespace.reverse()

	if len(namespace) < 1:
		return ''
	return '\\'.join(namespace)

endglobal


###########
###########


snippet #! "Insert php shebang line" b
#!/usr/bin/env php
$0
endsnippet


snippet <? "Insert opening tag" b
<?php

$0
endsnippet


snippet php "Insert opening tag" b
<?php

$0
endsnippet


snippet ns "Insert the current PHP namespace" b!
`!p snip.rv = 'namespace %s;' % filepath_to_namespace(path)`
endsnippet


snippet getter "PHP Class Getter" !b
/*
 * Getter for $1
 *
 * 
 */
public function get`!p snip.rv = underscore_to_capitalized(t[1])`()
{
    return $this->${1/\w+\s*/\l$0/};
}$0
endsnippet


snippet setter "PHP Class Setter" !b
/*
 * Setter for $1
 */
public function set`!p snip.rv = underscore_to_capitalized(t[1])`($2$${1/\w+\s*/\l$0/})
{
    $this->${1/\w+\s*/\l$0/} = $${1/\w+\s*/\l$0/};
}$0
endsnippet


snippet class "Class declaration template" !b
/**
 * Class ${1:`!p name=snip.fn.split('.')[0]; snip.rv=name[0].upper() + name[1:]`}
 *
 * @author `git config --get user.name` <`git config --get user.email`>
 */
`!p
if re.search(r'Abstract', path):
	snip.rv = 'abstract class'
elif re.search(r'Interface', path):
	snip.rv = 'interface'
else:
	snip.rv = 'class'` $1
{
    public function ${3:__construct}(${4})
    {
		$0
    }
}
endsnippet


snippet new "New class instance" !b
$$1 = new ${2:`!p var=t[1].replace('this->', ''); snip.rv=var[0].upper() + var[1:] if var else ''`}($3);$0
endsnippet


snippet fore "foreach loop" !
foreach ($${1:variable} as $${3:value}) {
    ${VISUAL}$0
}
endsnippet


snippet forek "foreach variable as key value"
foreach ($${1:variable} as $${2:key} => $${3:value}) {
    ${VISUAL}$0
}
endsnippet


snippet vd "var_dump"
var_dump($1);$0
endsnippet


snippet vdd "var_dump and die :)"
var_dump($1); die('dying maaan');$0
endsnippet


snippet try "add a try/catch block"
try {
	${VISUAL}$1
}
catch (${2:\Exception} as $e) {
	${3:// catch this}
}$0
endsnippet
